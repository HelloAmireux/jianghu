<!--
var Festival_I = new Array(
    '0101*元旦',
    '0202 世界湿地日',
    '0210 国际气象节',
    '0214 情人节',
    '0303 全国爱耳日',
    '0308 妇女节',
    '0312 植树节',
    '0314 国际警察日',
    '0315 消费者权益日',
    '0321 世界森林日',
    '0322 世界水日',
    '0323 世界气象日',
    '0324 世界防治结核病日',
    '0401 愚人节',
    '0407 世界卫生日',
    '0501*劳动节',
    '0504 青年节',
    '0505 全国碘缺乏病日',
    '0508 世界红十字日',
    '0512 国际护士节',
    '0515 国际家庭日',
    '0517 世界电信日',
    '0518 国际博物馆日',
    '0519 全国助残日',
    '0520 全国学生营养日',
    '0522 国际生物多样性日',
    '0523 国际牛奶日',
    '0531 世界无烟日',
    '0601 儿童节',
    '0605 世界环境日',
    '0606 全国爱眼日',
    //'0608 世界同性恋自豪节',
    '0617 防治荒漠化和干旱日',
    '0623 国际奥林匹克日',
    '0625 全国土地日',
    '0626 国际反毒品日',
    '0701 建党节 香港回归日',
    '0707 抗日战争纪念日',
    '0711 世界人口日',
    '0801 建军节',    
    '0910 教师节',
    '0916 国际臭氧层保护日',
    '0917 国际和平日',
    '0920 国际爱牙日',
    '0922 国际聋人节',
    '0927 世界旅游日',
    '1001*国庆节',
    '1002 国际减灾日',
    '1004 世界动物日',
    '1006 老人节',
    '1007 国际住房日',
    '1008 世界视觉日',
    '1009 世界邮政日',
    '1010 世界精神卫生日',
    '1015 国际盲人节',
    '1016 世界粮食节',
    '1017 世界消除贫困日',
    '1022 世界传统医药日',
    '1024 联合国日',
    '1108 中国记者日',
    '1109 消防宣传日',
    '1114 世界糖尿病日',
    '1117 国际大学生节',
    '1201 世界艾滋病日',
    '1203 世界残疾人日',
    '1209 世界足球日',
    '1220 澳门回归纪念',
    '1225 圣诞节'
    );

var Festival_II = new Array(
    '0101*春节',
    '0115 元宵节',
    '0505 端午节',
    '0707 七夕情人节',
    '0715 中元节',
    '0815 中秋节',
    '0909 重阳节',
    '1208 腊八节',
    '1224 小年',
    '0100*除夕'
);

var aryLunarYear = new Array(
	'己丑(牛)年', '庚寅(虎)年', '辛卯(兔)年', '壬辰(龙)年',
	'辛巳(蛇)年', '壬午(马)年', '癸未(羊)年', '甲申(猴)年',
	'己酉(鸡)年', '丙戌(狗)年', '丁亥(猪)年', '戊子(鼠)年',
	'丁丑(牛)年', '戊寅(虎)年', '己卯(兔)年', '庚辰(龙)年');

var today;
var Festival = new Array();

function GetCalenStr(pY,pM,pD)
{    
	today =new Date(pY,pM,pD);
	//result  = aryLunarYear[(pY-1901)%12] +'<br><br>'
	result  = GetLunarDateString(today) +'<br><br>'
    	result += WeekDay_Trans() +'<br>';
    	result += Festival_Trans('I', pM+1, pD);    
    	return result; 
}
function GetCalenStr_new(pY,pM,pD)
{    
	today =new Date(pY,pM,pD);
	//result  = aryLunarYear[(pY-1901)%12] +'<br><br>'
	//result  = GetLunarDateString(today) +'<br>';
    	//result += WeekDay_Trans() +'<br>';
    	result = Festival_Trans('I', pM+1, pD);    
    	return result; 
}
// 日期、星期转换
function WeekDay_Trans() {
	var theDay,nStr1 = new Array('日','一','二','三','四','五','六');
	var tY = today.getFullYear();
	var tM = today.getMonth() + 1;
	var tD = today.getDate();
	var tW = today.getDay();

	if(tM.toString().length<2) tM='0'+tM;
	if(tD.toString().length<2) tD='0'+tD;
	
	theDay = tY + "年" + tM + "月" + tD + "日<br>星期" + nStr1[tW];
	return theDay;
}

// 国际/传统节日、农历节日
function Festival_Trans(pID,pM,pD) {
    var i=0,matchres,result = '';
    eval("Festival=Festival_"+pID);
    
    for(i in Festival){
        matchres = Festival[i].match(/^(\d{2})(\d{2})([\s\*])(.+)$/);
        if(matchres) {
            if(Number(matchres[1])==pM && Number(matchres[2])==pD) {
            result = matchres[4];
            result = '<font color=red>*' + result + '</font>';
            break;
            }
        }
    }
    return '<BR>' + result;
}
<!--
// 数组LunarDaysOfMonth存入农历2001年到2050年每年中的月天数信息
// 农历每月只能是29或30天，一年用12(或13)个二进制位表示，从高到低，对应位为1表示30天，否则29天 
var LunarDaysOfMonth = new Array
(
    0xd4a8, 0xd4a0, 0xda50, 0x5aa8, 0x56a0, 0xaad8, 0x25d0, 0x92d0, 0xc958, 0xa950, // 2001-2010 
    0xb4a0, 0xb550, 0xb550, 0x55a8, 0x4ba0, 0xa5b0, 0x52b8, 0x52b0, 0xa930, 0x74a8, // 2011-2020 
    0x6aa0, 0xad50, 0x4da8, 0x4b60, 0x9570, 0xa4e0, 0xd260, 0xe930, 0xd530, 0x5aa0, // 2021-2030 
    0x6b50, 0x96d0, 0x4ae8, 0x4ad0, 0xa4d0, 0xd258, 0xd250, 0xd520, 0xdaa0, 0xb5a0, // 2031-2040 
    0x56d0, 0x4ad8, 0x49b0, 0xa4b8, 0xa4b0, 0xaa50, 0xb528, 0x6d20, 0xada0, 0x55b0  // 2041-2050 
);
 
// 数组LunarLeapYear存放农历2001年到2050年闰月的月份，如没有则为0，从高到低，每字节存两年 
var LunarLeapYear = new Array
(
    0x40, 0x02, 0x07, 0x00, 0x50, // 2001-2010 
    0x04, 0x09, 0x00, 0x60, 0x04, // 2011-2020 
    0x00, 0x20, 0x60, 0x05, 0x00, // 2021-2030 
    0x30, 0xb0, 0x06, 0x00, 0x50, // 2031-2040 
    0x02, 0x07, 0x00, 0x50, 0x03  // 2041-2050 
);
 
 
// 返回农历iLunarYear年的闰月月份，如没有则返回0 
function GetLeapMonth(iLunarYear)
{ 
    var Leap = LunarLeapYear[(iLunarYear - 2001) >> 1];
    return (((iLunarYear - 2001) & 1) == 0) ? (Leap >> 4) : (Leap & 0x0f);
} 
 
// 返回农历iLunarYer年iLunarMonth月的天数，结果是一个长整数
// 如果iLunarMonth不是闰月， 高字为0，低字为该月的天数
// 如果iLunarMonth是闰月， 高字为后一个月的天数，低字为前一个月的天数
function LunarMonthDays(iLunarYear, iLunarMonth)
{ 
    var High;
    var Low;
    var Bit;
 
    High = 0;
    Low = 29;
    Bit = 16 - iLunarMonth;
    if ((iLunarMonth > GetLeapMonth(iLunarYear)) && (GetLeapMonth(iLunarYear) > 0))  Bit--;
    if ((LunarDaysOfMonth[iLunarYear - 2001] & (1 << Bit)) > 0)  Low++;
    if (iLunarMonth == GetLeapMonth(iLunarYear))
    {
        High = ((LunarDaysOfMonth[iLunarYear - 2001] & (1 << (Bit-1))) > 0) ?  30 : 29;
    }
 
    return Low + (High << 16);
} 
 
// 返回农历iLunarYear年的总天数
function LunarYearDays(iLunarYear)
{ 
    var Days;
    var tmp;
 
    Days = 0;
    for (var i=1; i <= 12; i++)
    {
        tmp = LunarMonthDays(iLunarYear, i);
        Days = Days + ((tmp >> 16) & 0xffff); //取高位 
        Days = Days + (tmp & 0xffff); //取低位 
    }
 
    return Days;
} 
 
// 将农历iLunarYear年格式化成天干地支记年法表示的字符串 
function FormatLunarYear(iLunarYear)
{ 
    var szText1 = new String("甲乙丙丁戊己庚辛壬癸");
    var szText2 = new String("子丑寅卯辰巳午未申酉戌亥");
    var szText3 = new String("鼠牛虎兔龙蛇马羊猴鸡狗猪");
    var strYear;
  
    strYear = szText1.substr((iLunarYear - 4) % 10, 1);
    strYear = strYear + szText2.substr((iLunarYear - 4) % 12, 1);
    strYear = strYear + "("+szText3.substr((iLunarYear - 4) % 12, 1)+")";
 
    return strYear + "年";
}
 
// 将农历iLunarMonth月格式化成农历表示的字符串
function FormatLunarMonth(iLunarMonth)
{ 
    var szText = new String("正二三四五六七八九十");
    var strMonth;
 
    if (iLunarMonth <= 10)
    {
        strMonth = szText.substr(iLunarMonth - 1, 1);
    }
    else if (iLunarMonth == 11) strMonth = "十一";
    else strMonth = "十二";
 
    return strMonth + "月";
} 
 
// 将农历iLunarDay日格式化成农历表示的字符串
function FormatLunarDay(iLunarDay)
{ 
    var szText1 = new String("初十廿三");
    var szText2 = new String("一二三四五六七八九十");
    var strDay;
    if ((iLunarDay != 20) && (iLunarDay != 30))
    {
        strDay = szText1.substr((iLunarDay - 1) / 10, 1) + szText2.substr((iLunarDay - 1) % 10, 1);
    }
    else if (iLunarDay != 20)
    {
        strDay = szText1.substr(iLunarDay / 10, 1) + "十";
    }
    else
    {
        strDay = "二十";
    }
  
    return strDay;
} 
 
// 将公历日期转换为农历日期，返回农历表示的字符串
function GetLunarDateString(SolarDate)
{
    var tmp;
    var iLunarYear;
    var iLunarMonth;
    var iLunarDay;
    var Leap = false;
    var MinMilli = 1000 * 60;
    var HrMilli = MinMilli * 60;
    var DyMilli = HrMilli * 24;
  
    // 从2001年1月1日算起，给定的公历日期已经过去的天数
    // 11323是1970年1月1日到2001年1月1日之间的天数，因为Date是从1970年1月1日作为起点的
    var iSpanDays = Math.round(SolarDate.getTime() / DyMilli) - 11323;
 
    // 公历2001年1月24日为农历2001年正月初一，差23天
    if (iSpanDays < 23)
    {
        iYear = 2000;
        iLunarMonth = 12;
        iLunarDay = iSpanDays + 7;
    }
    else
    {
        // 从农历2001年正月初一算起 
        iSpanDays = iSpanDays - 23;
        iLunarYear = 2001;
        iLunarMonth = 1;
        iLunarDay = 1;
  
        // 计算农历年 
        tmp = LunarYearDays(iLunarYear);
        while (iSpanDays >= tmp)
        {
            iSpanDays -= tmp;
            iLunarYear++;
            tmp = LunarYearDays(iLunarYear);
        }
 
        // 计算农历月 
        tmp = LunarMonthDays(iLunarYear, iLunarMonth) & 0xffff; //取低字
        while (iSpanDays >= tmp)
        {
            iSpanDays -= tmp;
            if (iLunarMonth == GetLeapMonth(iLunarYear))  // 该年该月闰月
            {
                tmp = LunarMonthDays(iLunarYear, iLunarMonth) >> 16; //取高字
                if (iSpanDays < tmp)
                {
                    Leap = (tmp > 0) ? true : false;  // 闰月的后个月？
                    break;
                }
                iSpanDays = iSpanDays - tmp;
            }
  
            iLunarMonth++;
            tmp = LunarMonthDays(iLunarYear,iLunarMonth) & 0xffff; //取低字
        }
  
        // 计算农历日 
        iLunarDay += iSpanDays;
    }
  
    return FormatLunarYear(iLunarYear) ;//+ (Leap ? "闰" : "");
}
//-->
//-->